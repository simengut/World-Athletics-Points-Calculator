{"ast":null,"code":"// Format time input for middle/long distance events\nexport const formatTimeInput = (input, eventType) => {\n  if (!['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType)) {\n    return input;\n  }\n\n  // Check if input matches mm:ss.xx format\n  const timeRegex = /^(\\d{1,2}):([0-5]\\d\\.\\d{2})$/;\n  const match = input.match(timeRegex);\n  if (match) {\n    const minutes = parseInt(match[1]);\n    const seconds = parseFloat(match[2]);\n    return (minutes * 60 + seconds).toFixed(2);\n  }\n  return null;\n};\n\n// Format performance output based on event type\nexport const formatPerformance = (performance, eventType) => {\n  // For middle/long distance events\n  if (['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType)) {\n    const minutes = Math.floor(performance / 60);\n    const seconds = (performance % 60).toFixed(2);\n    return `${minutes}:${seconds.padStart(5, '0')}`;\n  }\n\n  // For track events\n  if (eventType.endsWith('m') || eventType.endsWith('mH')) {\n    return performance.toFixed(2);\n  }\n\n  // For field events\n  return performance.toFixed(2);\n};\n\n// Get placeholder text for input field\nexport const getPlaceholderText = (eventType, mode) => {\n  if (mode === 'points') {\n    // For running events\n    if (['100m', '200m', '400m', '60m', '100mH', '110mH', '400mH', '60mH'].includes(eventType)) {\n      return `Enter ${eventType} time (ss.xx)`;\n    } else if (['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType)) {\n      return `Enter ${eventType} time (mm:ss.xx)`;\n    }\n    // For field events\n    else if (['Long Jump', 'Triple Jump', 'High Jump', 'Pole Vault'].includes(eventType)) {\n      return `Enter ${eventType} distance (m.cm)`;\n    } else if (['Shot Put', 'Discus Throw', 'Hammer Throw', 'Javelin Throw'].includes(eventType)) {\n      return `Enter ${eventType} distance (m.cm)`;\n    }\n    // For combined events\n    else if (['Decathlon', 'Heptathlon', 'Pentathlon'].includes(eventType)) {\n      return `Enter ${eventType} score (whole number)`;\n    }\n    return 'Enter performance';\n  } else {\n    return 'Enter points (0-1400)';\n  }\n};","map":{"version":3,"names":["formatTimeInput","input","eventType","includes","timeRegex","match","minutes","parseInt","seconds","parseFloat","toFixed","formatPerformance","performance","Math","floor","padStart","endsWith","getPlaceholderText","mode"],"sources":["/Users/simenguttormsen/Documents/WorldAthleticsCalculator/iaaf-frontend/src/utils/formatters.js"],"sourcesContent":["// Format time input for middle/long distance events\nexport const formatTimeInput = (input, eventType) => {\n  if (!['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType)) {\n    return input;\n  }\n\n  // Check if input matches mm:ss.xx format\n  const timeRegex = /^(\\d{1,2}):([0-5]\\d\\.\\d{2})$/;\n  const match = input.match(timeRegex);\n\n  if (match) {\n    const minutes = parseInt(match[1]);\n    const seconds = parseFloat(match[2]);\n    return (minutes * 60 + seconds).toFixed(2);\n  }\n\n  return null;\n};\n\n// Format performance output based on event type\nexport const formatPerformance = (performance, eventType) => {\n  // For middle/long distance events\n  if (['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType)) {\n    const minutes = Math.floor(performance / 60);\n    const seconds = (performance % 60).toFixed(2);\n    return `${minutes}:${seconds.padStart(5, '0')}`;\n  }\n\n  // For track events\n  if (eventType.endsWith('m') || eventType.endsWith('mH')) {\n    return performance.toFixed(2);\n  }\n\n  // For field events\n  return performance.toFixed(2);\n};\n\n// Get placeholder text for input field\nexport const getPlaceholderText = (eventType, mode) => {\n  if (mode === 'points') {\n    // For running events\n    if (['100m', '200m', '400m', '60m', '100mH', '110mH', '400mH', '60mH'].includes(eventType)) {\n      return `Enter ${eventType} time (ss.xx)`;\n    } else if (['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType)) {\n      return `Enter ${eventType} time (mm:ss.xx)`;\n    } \n    // For field events\n    else if (['Long Jump', 'Triple Jump', 'High Jump', 'Pole Vault'].includes(eventType)) {\n      return `Enter ${eventType} distance (m.cm)`;\n    } else if (['Shot Put', 'Discus Throw', 'Hammer Throw', 'Javelin Throw'].includes(eventType)) {\n      return `Enter ${eventType} distance (m.cm)`;\n    } \n    // For combined events\n    else if (['Decathlon', 'Heptathlon', 'Pentathlon'].includes(eventType)) {\n      return `Enter ${eventType} score (whole number)`;\n    }\n    return 'Enter performance';\n  } else {\n    return 'Enter points (0-1400)';\n  }\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,eAAe,GAAGA,CAACC,KAAK,EAAEC,SAAS,KAAK;EACnD,IAAI,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,SAAS,CAAC,EAAE;IACtE,OAAOD,KAAK;EACd;;EAEA;EACA,MAAMG,SAAS,GAAG,8BAA8B;EAChD,MAAMC,KAAK,GAAGJ,KAAK,CAACI,KAAK,CAACD,SAAS,CAAC;EAEpC,IAAIC,KAAK,EAAE;IACT,MAAMC,OAAO,GAAGC,QAAQ,CAACF,KAAK,CAAC,CAAC,CAAC,CAAC;IAClC,MAAMG,OAAO,GAAGC,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;IACpC,OAAO,CAACC,OAAO,GAAG,EAAE,GAAGE,OAAO,EAAEE,OAAO,CAAC,CAAC,CAAC;EAC5C;EAEA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,WAAW,EAAEV,SAAS,KAAK;EAC3D;EACA,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,SAAS,CAAC,EAAE;IACrE,MAAMI,OAAO,GAAGO,IAAI,CAACC,KAAK,CAACF,WAAW,GAAG,EAAE,CAAC;IAC5C,MAAMJ,OAAO,GAAG,CAACI,WAAW,GAAG,EAAE,EAAEF,OAAO,CAAC,CAAC,CAAC;IAC7C,OAAO,GAAGJ,OAAO,IAAIE,OAAO,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;EACjD;;EAEA;EACA,IAAIb,SAAS,CAACc,QAAQ,CAAC,GAAG,CAAC,IAAId,SAAS,CAACc,QAAQ,CAAC,IAAI,CAAC,EAAE;IACvD,OAAOJ,WAAW,CAACF,OAAO,CAAC,CAAC,CAAC;EAC/B;;EAEA;EACA,OAAOE,WAAW,CAACF,OAAO,CAAC,CAAC,CAAC;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMO,kBAAkB,GAAGA,CAACf,SAAS,EAAEgB,IAAI,KAAK;EACrD,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACrB;IACA,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAACf,QAAQ,CAACD,SAAS,CAAC,EAAE;MAC1F,OAAO,SAASA,SAAS,eAAe;IAC1C,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACD,SAAS,CAAC,EAAE;MAC5E,OAAO,SAASA,SAAS,kBAAkB;IAC7C;IACA;IAAA,KACK,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,WAAW,EAAE,YAAY,CAAC,CAACC,QAAQ,CAACD,SAAS,CAAC,EAAE;MACpF,OAAO,SAASA,SAAS,kBAAkB;IAC7C,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,cAAc,EAAE,cAAc,EAAE,eAAe,CAAC,CAACC,QAAQ,CAACD,SAAS,CAAC,EAAE;MAC5F,OAAO,SAASA,SAAS,kBAAkB;IAC7C;IACA;IAAA,KACK,IAAI,CAAC,WAAW,EAAE,YAAY,EAAE,YAAY,CAAC,CAACC,QAAQ,CAACD,SAAS,CAAC,EAAE;MACtE,OAAO,SAASA,SAAS,uBAAuB;IAClD;IACA,OAAO,mBAAmB;EAC5B,CAAC,MAAM;IACL,OAAO,uBAAuB;EAChC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
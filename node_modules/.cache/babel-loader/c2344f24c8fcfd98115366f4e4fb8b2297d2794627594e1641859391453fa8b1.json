{"ast":null,"code":"export const WIND_AFFECTED_EVENTS = ['100m', '200m', '100mH', '110mH', 'LJ', 'TJ'];\nexport const calculateWindModification = (windSpeed, hasWindInfo = true) => {\n  // If no wind information (NWI)\n  if (!hasWindInfo) return -30;\n\n  // Convert to number if string\n  windSpeed = Number(windSpeed);\n\n  // No modification between 0 and +2.0\n  if (windSpeed >= 0 && windSpeed <= 2.0) return 0;\n\n  // For values between those in the table, use ±0.6 points for every ±0.1 m/s\n  if (windSpeed < 0) {\n    // Headwind: add points (+6 points per m/s)\n    return Math.round(Math.abs(windSpeed) * 6 * 10) / 10;\n  } else {\n    // Tailwind above 2.0: subtract points\n    // Calculate from 0.0 but only apply after 2.0\n    return Math.round(windSpeed * -6 * 10) / 10;\n  }\n};\n\n// Helper function to get both base and wind-adjusted scores\nexport const getWindAdjustedScore = (basePoints, windSpeed, hasWindInfo = true, isWindAffectedEvent = false) => {\n  if (!isWindAffectedEvent) {\n    return {\n      baseScore: basePoints,\n      windAdjustedScore: basePoints\n    };\n  }\n  const windModification = calculateWindModification(windSpeed, hasWindInfo);\n  return {\n    baseScore: basePoints,\n    windAdjustedScore: Math.round(basePoints + windModification)\n  };\n};","map":{"version":3,"names":["WIND_AFFECTED_EVENTS","calculateWindModification","windSpeed","hasWindInfo","Number","Math","round","abs","getWindAdjustedScore","basePoints","isWindAffectedEvent","baseScore","windAdjustedScore","windModification"],"sources":["/Users/simenguttormsen/Documents/Full_Stack_IAAf_Table/iaaf-frontend/src/utils/windModification.js"],"sourcesContent":["export const WIND_AFFECTED_EVENTS = [\n  '100m', '200m', '100mH', '110mH', 'LJ', 'TJ'\n];\n\nexport const calculateWindModification = (windSpeed, hasWindInfo = true) => {\n  // If no wind information (NWI)\n  if (!hasWindInfo) return -30;\n\n  // Convert to number if string\n  windSpeed = Number(windSpeed);\n\n  // No modification between 0 and +2.0\n  if (windSpeed >= 0 && windSpeed <= 2.0) return 0;\n\n  // For values between those in the table, use ±0.6 points for every ±0.1 m/s\n  if (windSpeed < 0) {\n    // Headwind: add points (+6 points per m/s)\n    return Math.round(Math.abs(windSpeed) * 6 * 10) / 10;\n  } else {\n    // Tailwind above 2.0: subtract points\n    // Calculate from 0.0 but only apply after 2.0\n    return Math.round((windSpeed * -6) * 10) / 10;\n  }\n};\n\n// Helper function to get both base and wind-adjusted scores\nexport const getWindAdjustedScore = (basePoints, windSpeed, hasWindInfo = true, isWindAffectedEvent = false) => {\n  if (!isWindAffectedEvent) {\n    return {\n      baseScore: basePoints,\n      windAdjustedScore: basePoints\n    };\n  }\n\n  const windModification = calculateWindModification(windSpeed, hasWindInfo);\n  \n  return {\n    baseScore: basePoints,\n    windAdjustedScore: Math.round(basePoints + windModification)\n  };\n}; "],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAG,CAClC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,CAC7C;AAED,OAAO,MAAMC,yBAAyB,GAAGA,CAACC,SAAS,EAAEC,WAAW,GAAG,IAAI,KAAK;EAC1E;EACA,IAAI,CAACA,WAAW,EAAE,OAAO,CAAC,EAAE;;EAE5B;EACAD,SAAS,GAAGE,MAAM,CAACF,SAAS,CAAC;;EAE7B;EACA,IAAIA,SAAS,IAAI,CAAC,IAAIA,SAAS,IAAI,GAAG,EAAE,OAAO,CAAC;;EAEhD;EACA,IAAIA,SAAS,GAAG,CAAC,EAAE;IACjB;IACA,OAAOG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACL,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE;EACtD,CAAC,MAAM;IACL;IACA;IACA,OAAOG,IAAI,CAACC,KAAK,CAAEJ,SAAS,GAAG,CAAC,CAAC,GAAI,EAAE,CAAC,GAAG,EAAE;EAC/C;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,oBAAoB,GAAGA,CAACC,UAAU,EAAEP,SAAS,EAAEC,WAAW,GAAG,IAAI,EAAEO,mBAAmB,GAAG,KAAK,KAAK;EAC9G,IAAI,CAACA,mBAAmB,EAAE;IACxB,OAAO;MACLC,SAAS,EAAEF,UAAU;MACrBG,iBAAiB,EAAEH;IACrB,CAAC;EACH;EAEA,MAAMI,gBAAgB,GAAGZ,yBAAyB,CAACC,SAAS,EAAEC,WAAW,CAAC;EAE1E,OAAO;IACLQ,SAAS,EAAEF,UAAU;IACrBG,iBAAiB,EAAEP,IAAI,CAACC,KAAK,CAACG,UAAU,GAAGI,gBAAgB;EAC7D,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
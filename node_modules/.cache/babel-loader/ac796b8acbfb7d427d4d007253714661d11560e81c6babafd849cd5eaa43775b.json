{"ast":null,"code":"import { formatTimeInput } from './formatters';\nimport { EVENT_CODES } from './eventCodes';\nimport { calculateWindModification, needsWindInput } from './windModification';\nexport const calculatePoints = async ({\n  mode,\n  performance,\n  eventType,\n  gender,\n  season,\n  windSpeed\n}) => {\n  try {\n    if (mode === 'points') {\n      // Performance to Points calculation\n      const formattedPerformance = formatTimeInput(performance, eventType);\n      if (['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType) && !formattedPerformance) {\n        console.error('Invalid time format');\n        return null;\n      }\n      const response = await fetch('http://localhost:5001/api/calculate-points', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          event_type: EVENT_CODES[eventType] || eventType,\n          performance: formattedPerformance || performance,\n          gender: gender,\n          season: season\n        })\n      });\n      const data = await response.json();\n      const basePoints = Math.round(data.points);\n\n      // Only apply wind adjustment for outdoor events\n      if (season === 'outdoor' && needsWindInput(eventType, season) && windSpeed) {\n        const windAdjustment = calculateWindModification(eventType, parseFloat(windSpeed), basePoints);\n        return {\n          points: basePoints,\n          adjustedPoints: Math.round(basePoints + windAdjustment)\n        };\n      }\n      return {\n        points: basePoints,\n        adjustedPoints: basePoints\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["formatTimeInput","EVENT_CODES","calculateWindModification","needsWindInput","calculatePoints","mode","performance","eventType","gender","season","windSpeed","formattedPerformance","includes","console","error","response","fetch","method","headers","body","JSON","stringify","event_type","data","json","basePoints","Math","round","points","windAdjustment","parseFloat","adjustedPoints"],"sources":["/Users/simenguttormsen/Documents/Full_Stack_IAAf_Table/iaaf-frontend/src/utils/calculators.js"],"sourcesContent":["import { formatTimeInput } from './formatters';\nimport { EVENT_CODES } from './eventCodes';\nimport { calculateWindModification, needsWindInput } from './windModification';\n\nexport const calculatePoints = async ({\n  mode,\n  performance,\n  eventType,\n  gender,\n  season,\n  windSpeed\n}) => {\n  try {\n    if (mode === 'points') {\n      // Performance to Points calculation\n      const formattedPerformance = formatTimeInput(performance, eventType);\n      if (['800m', '1500m', '3000m', '5000m', '10000m'].includes(eventType) && !formattedPerformance) {\n        console.error('Invalid time format');\n        return null;\n      }\n\n      const response = await fetch('http://localhost:5001/api/calculate-points', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          event_type: EVENT_CODES[eventType] || eventType,\n          performance: formattedPerformance || performance,\n          gender: gender,\n          season: season\n        }),\n      });\n      const data = await response.json();\n      const basePoints = Math.round(data.points);\n\n      // Only apply wind adjustment for outdoor events\n      if (season === 'outdoor' && needsWindInput(eventType, season) && windSpeed) {\n        const windAdjustment = calculateWindModification(\n          eventType,\n          parseFloat(windSpeed),\n          basePoints\n        );\n        return {\n          points: basePoints,\n          adjustedPoints: Math.round(basePoints + windAdjustment)\n        };\n      }\n      \n      return {\n        points: basePoints,\n        adjustedPoints: basePoints\n      };\n    }\n    return null;\n  } catch (error) {\n    console.error('Error:', error);\n    return null;\n  }\n}; "],"mappings":"AAAA,SAASA,eAAe,QAAQ,cAAc;AAC9C,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,yBAAyB,EAAEC,cAAc,QAAQ,oBAAoB;AAE9E,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAO;EACpCC,IAAI;EACJC,WAAW;EACXC,SAAS;EACTC,MAAM;EACNC,MAAM;EACNC;AACF,CAAC,KAAK;EACJ,IAAI;IACF,IAAIL,IAAI,KAAK,QAAQ,EAAE;MACrB;MACA,MAAMM,oBAAoB,GAAGX,eAAe,CAACM,WAAW,EAAEC,SAAS,CAAC;MACpE,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,CAACK,QAAQ,CAACL,SAAS,CAAC,IAAI,CAACI,oBAAoB,EAAE;QAC9FE,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;QACpC,OAAO,IAAI;MACb;MAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;QACzEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,UAAU,EAAErB,WAAW,CAACM,SAAS,CAAC,IAAIA,SAAS;UAC/CD,WAAW,EAAEK,oBAAoB,IAAIL,WAAW;UAChDE,MAAM,EAAEA,MAAM;UACdC,MAAM,EAAEA;QACV,CAAC;MACH,CAAC,CAAC;MACF,MAAMc,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,MAAM,CAAC;;MAE1C;MACA,IAAInB,MAAM,KAAK,SAAS,IAAIN,cAAc,CAACI,SAAS,EAAEE,MAAM,CAAC,IAAIC,SAAS,EAAE;QAC1E,MAAMmB,cAAc,GAAG3B,yBAAyB,CAC9CK,SAAS,EACTuB,UAAU,CAACpB,SAAS,CAAC,EACrBe,UACF,CAAC;QACD,OAAO;UACLG,MAAM,EAAEH,UAAU;UAClBM,cAAc,EAAEL,IAAI,CAACC,KAAK,CAACF,UAAU,GAAGI,cAAc;QACxD,CAAC;MACH;MAEA,OAAO;QACLD,MAAM,EAAEH,UAAU;QAClBM,cAAc,EAAEN;MAClB,CAAC;IACH;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}